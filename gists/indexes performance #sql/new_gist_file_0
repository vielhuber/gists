# Description
- Copy of selected columns that can be searched quickly
- Index is sorted
- Has as many rows as the table
- Nothing else but a sorted table 
- Can be compared with a "table of contents" in a book
- SELECT statements get very fast
- UPDATE, INSERT, DELETE get slower (because data has to be written multiple times)
- Indexes are always sorted from left to right

# Example
SELECT * FROM table WHERE owner_id > 10
id  name    owner_id
1   foo1     7
2   foo2     13
3   foo3     15
4   foo4     19
5   foo5     1
=> takes time, because full table must be scanned
owner_id    id
1           5
7           1
13          2
15          3
19          4
=> very fast on that index table
owner_id    name    id
1           foo5    5
7           foo1    1
13          foo2    2
15          foo3    3
19          foo4    4
SELECT name FROM table WHERE owner_id > 10 => does not even look up original table
=> Warning: SELECT * FROM table WHERE name = 'foo5' does not use this index (because name is second, not first!

# Debugging
- Simply add "EXPLAIN" before the query and (My)SQL shows which indexes have been used

# Best practice
- Any columns in queries should be indexed
- Always remove redundant indexes (e.g. index_labels_on_table_id and index_labels_on_table_id_and_name) where one index is included in the other

# Index prefix
- Cuts off long varchar, text, blog etc. datatypes
- Then those fields also can be used in an index
- Length should be determined via real data (should be long enough to distinguish data)

# OR-Statements
- Do not use OR statements because MySQL can only use one index per table during a query
- It choses only one and not multiple
- PostgreSQL has an index merge feature where this is possible
- Instead use UNION and multiple queries (where on each one one index is used)

# ORDER
- SELECT * FROM table WHERE indexed_col = 1337 ORDER BY id
- ORDER BY id kills the performance because MySQL goes for id (instead of indexed_col)

# FORCE INDEX
- We can tell MySQL which index should be used:
SELECT * FROM table FORCE INDEX(name_of_index) WHERE indexed_col = 1337 ORDER BY id
- There is also "USE IDNEX" and "IGNORE INDEX"
- PostgreSQL hasn't got such a feature